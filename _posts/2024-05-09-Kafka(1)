# 카프카, 데이터 플랫폼의 최강자
## 1장 - 카프카란 무엇인가?
### 카프카의 탄생 배경과 발전 과정
end-to-end 연결 방식의 아키텍처의 문제점
* 실시간 트랜잭션 (OLTP) 처리와 비동기 처리가 동시에 이뤄지지만 통합된 전송 영역이 없어 복잡도 증가
* 데이터 파이프라인 관리의 어려움
	* 시간이 지나면서 통합 데이터 분석을 위해 서로 연결 되어야 하는 일들이 필연적으로 발생 -> 포맷 및 처리과정이 달라 확장 불가

카프카의 GOAL
* 프로듀서/컨슈머 분리
* 메시징 시스템과 같이 영구 메시지 데이터를 여러 컨슈머에게 허용
* 높은 처리량을 위한 메시지 최적화
* 데이터가 증가함에 따라 스케일 아웃이 가능한 시스템

### 데이터 처리 시스템의 변화
pub/sub 모델
![img](https://velog.velcdn.com/images%2Fseungyeon%2Fpost%2F828cc4f6-1a71-4c9b-a71b-f2604143bb2a%2Fimage.png)
: 보내는 측에서 토픽이라는 각각의 메시지 저장소에 데이터를 저장하면, 가져가는 측이 원하는 토픽에서 데이터를 가져감
* 수신자는 발신자 정보가 없어도 원하는 메시지만 수신 가능 -> 다이나믹한 네트워크 토플로지와 높은 확장성 확보
* 메시지 시스템만 살아 있으면 메시지 유실의 염려가 없음
* 단, 직접 통신하지 않기 때문에 정확하게 전달되었는지 확인하려면 코드가 좀더 복잡해지고, 중간에 메시징 시스템이 있기 때문에 메시지 전달 속도가 빠르지 않음

기존 메시징 시스템의 문제
* 주로 대규모 데이터보단 간단한 이벤트를 전송
	* 시스템 내부의 교환기의 부하, 각 컨슈머 큐 관리, 큐에 전달되고 가져가는 메시지의 정합성, 전달 결과를 정확하게 관리하기 위한 내부 프로세스가 복잡 -> 속도와 용량보다 신뢰성 보장에 힘씀

카프카의 기존 메시징 시스템 단점 극복 방법
* 교환 전달의 신뢰성 관리를 프로듀서와 컨슈머 쪽으로 넘김
* 부하가 많이 걸리는 교환기 기능 역시 컨슈머가 만들수 있게 함
	* 메시징 시스템 내에서의 작업량을 줄이고 전달 성능에 집중

카프카의 메시지 전달 순서
1. 프로듀서는 새로운 메시지를 카프카로 보냄
2. 프로듀서가 보낸 메시지는 카프카에 컨슈머 큐 (토픽) 에 도착해 저장됨
3. 컨슈머는 카프카 서버에 접속하여 새로운 메시지 가져감

### 카프카의 동작 방식과 특징
카프카의 특징
* 프로듀서와 컨슈머의 분리
	* 각자의 역활이 완벽히 분리되면서, 한쪽 시스템에서 문제 발생시 연쇄작용이 발생할 확률이 매우 낮음
	* 웹 서버가 추가되더라도 카프카로만 보내면 되기 때문에 서버 추가에 대한 부담도 줄일 수 있음
* 멀티 프로듀서, 멀티 컨슈머
	* 데이터 분석 및 처리 프로세스에서 하나의 데이터를 다양한 용도로 사용하는 요구 충족
	* 중앙 집중형 구조 구성 가능
* 디스크에 메시지 저장
	* 일반적인 메시징 시스템들은 컨슈머가 메시지를 읽어가면 큐에서 바로 삭제하지만, 카프카는 컨슈머가 메시지를 읽어가더라도 정해져 있는 보관 주기 동안 디스크에 메세지를 저장
	* 메시지 손실 없이 작업 가능
* 확장성
	* 하나의 카프카 클러스터는 3대의 브로커\(카프카 애플리케이션이 설치되어 있는 서버/노드\)로 시작해 수십 대의 브로커로 확장 가능
	* 확장 작업은 서비스 중단 없이 온라인 상태에서 작업 가능
* 높은 성능


### 카프카의 확장과 발전
* SOA 의 핵심 구성요소 중 하나인 ESB\(Enterprise Service Bus\)를 쉽게 구현

ESB의 특징
* 다양한 시스템과 연동하기 위한 멀티 프로토콜과 데이터 타입 지원
* 느슨한 결합을 위한 메시지 큐 지원
* 정기적으로 데이터를 가져오는 대신 이벤트 기반 통신 지향

** 필요한 모든 데이터가 연결되어 서로 가져갈수 있는 형태로 발전**
	* 빅데이터 분석과 머신러닝 플랫폼을 만드는데 아주 중요한 요소

단순 메시징을 연결해주는 역할을 넘어 실시간 분석까지 할 수 있는 카프카 스트림즈, KSQL, 등 분석시스템으로 진화

적용사례
* 넷플릭스
	* 모든 이벤트카 앞단 카프카로 전송, 수집된 후 메시지 제어부 -> 메시지 라우터 -> 저장소\(S3\), 분석\(EMR\), 인덱싱\(Elasticsearch\)
															  -> 또 다른 카프카에 연결되어 다른 앱들에서 사용
* 프라이빗 블록체인 - 하이퍼레저
	* Ordering Service Node 역활 : 모든 트랜잭션을 블록 형태의 메시지로 패키지하고 내부의 카프카 클러스터로 정보 전달
		* 해당 정보는 절대로 손실되어서 안되고 순서도 보장되어야 함
	* OSN 중앙에 카프카 클러스터가 연결 및 통신 -> fault tolerance + 정확한 메시지 순서 제공


